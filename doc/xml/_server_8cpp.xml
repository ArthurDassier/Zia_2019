<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_server_8cpp" kind="file" language="C++">
    <compoundname>Server.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="_server_8hpp" local="yes">Server.hpp</includes>
    <includes refid="_log_8hpp" local="yes">Log.hpp</includes>
    <includes local="no">boost/asio.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">iterator</includes>
    <incdepgraph>
      <node id="286">
        <label>functional</label>
      </node>
      <node id="283">
        <label>openZia/Pipeline.hpp</label>
      </node>
      <node id="291">
        <label>filesystem</label>
      </node>
      <node id="305">
        <label>iterator</label>
      </node>
      <node id="304">
        <label>Log.hpp</label>
        <link refid="_log_8hpp"/>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="290">
        <label>Config.hpp</label>
        <link refid="_config_8hpp"/>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
      </node>
      <node id="294">
        <label>string</label>
      </node>
      <node id="303">
        <label>Module.hpp</label>
        <link refid="_module_8hpp"/>
        <childnode refid="290" relation="include">
        </childnode>
      </node>
      <node id="295">
        <label>ConnectionManager.hpp</label>
        <link refid="_connection_manager_8hpp"/>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
      </node>
      <node id="292">
        <label>fstream</label>
      </node>
      <node id="302">
        <label>JsonLoader.hpp</label>
        <link refid="_json_loader_8hpp"/>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="282">
        <label>boost/asio.hpp</label>
      </node>
      <node id="278">
        <label>src/server/Server.cpp</label>
        <link refid="_server_8cpp"/>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
      </node>
      <node id="300">
        <label>openZia/IModule.hpp</label>
      </node>
      <node id="289">
        <label>vector</label>
      </node>
      <node id="297">
        <label>Connection.hpp</label>
        <link refid="_connection_8hpp"/>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>array</label>
      </node>
      <node id="284">
        <label>config/ConfigManager.hpp</label>
        <link refid="_config_manager_8hpp"/>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
      </node>
      <node id="301">
        <label>utils/EnvManager.hpp</label>
        <link refid="_env_manager_8hpp"/>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
      </node>
      <node id="285">
        <label>cstdlib</label>
      </node>
      <node id="279">
        <label>iostream</label>
      </node>
      <node id="288">
        <label>unordered_map</label>
      </node>
      <node id="280">
        <label>Server.hpp</label>
        <link refid="_server_8hpp"/>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
      </node>
      <node id="281">
        <label>thread</label>
      </node>
      <node id="296">
        <label>set</label>
      </node>
      <node id="293">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="287">
        <label>memory</label>
      </node>
      <node id="299">
        <label>ServerConfig.hpp</label>
        <link refid="_server_config_8hpp"/>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2020</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>CPP_zia_2019</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>Server</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_server_8hpp" kindref="compound">Server.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_log_8hpp" kindref="compound">Log.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/asio.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_zia" kindref="compound">Zia</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_zia_1_1_server_1a3f1591f28c6755b353d61e3a44d56b39" refkind="member"><highlight class="normal"><ref refid="class_zia_1_1_server_1a3f1591f28c6755b353d61e3a44d56b39" kindref="member">Server::Server</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_zia_1_1_server_1a10861064c5ac1dc97cc537023d67471d" kindref="member">ConfigPtr</ref><sp/>&amp;config):</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>_pipeline(std::move(config-&gt;getModulesPath()),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(config-&gt;getConfigPath())),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>_configManager(config-&gt;getConfigPath()),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>_serverConfig(config),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>_socket(_io_service),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>_acceptor(_io_service),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>_acceptorHTTPS(_io_service),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>_signals(_io_service),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>_ip(config-&gt;getAddress()),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>_port(config-&gt;getPort())</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>_signals.add(SIGINT);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>_signals.add(SIGTERM);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SIGQUIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>_signals.add(SIGQUIT);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined(SIGQUIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ManagingSignals();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::asio::ip::tcp::resolver<sp/>resolver(_io_service);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_zia_1_1_server_1a4764ec255c11f5b7fb87f5ab1d44e952" kindref="member">Endpoint</ref><sp/>endpoint<sp/>=<sp/>*resolver.resolve({_ip,<sp/>std::to_string(_port)});</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>setAcceptor(_acceptor,<sp/>endpoint);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_zia_1_1_server_1a4764ec255c11f5b7fb87f5ab1d44e952" kindref="member">Endpoint</ref><sp/>secure_endpoint<sp/>=<sp/>*resolver.resolve({_ip,<sp/>std::to_string(<ref refid="namespace_zia_1ae53d6fd6614900bbc59b6912d6a629d4" kindref="member">DefaultPortHTTPS</ref>)});</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>setAcceptor(_acceptorHTTPS,<sp/>secure_endpoint);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>addEnabledModules(_serverConfig-&gt;getEnabledModulesList());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>_configManager.<ref refid="classcfg_1_1_config_manager_1a324ba63493aefb579500f7338bd477db" kindref="member">onConfigChange</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_serverConfig-&gt;loadConfig(_serverConfig-&gt;getPath());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addEnabledModules(_serverConfig-&gt;getEnabledModulesList());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>_configManager.<ref refid="classcfg_1_1_config_manager_1addf0e3547d8e4d7dd023c17e43e8176d" kindref="member">manage</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>modules<sp/>loaded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_pipeline.getModules().size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitingClient();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_zia_1_1_log_1a7abad30f76aea6c210ae245885f05137" kindref="member">Log::info</ref>(</highlight><highlight class="stringliteral">&quot;Server<sp/>Started\n&gt;<sp/>IP\t&quot;</highlight><highlight class="normal"><sp/>+<sp/>_ip<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&gt;<sp/>Port\t&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(_port));</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_zia_1_1_server_1abb27d30b40a94326e3fd629d3b30b7d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_zia_1_1_server_1abb27d30b40a94326e3fd629d3b30b7d5" kindref="member">Server::run</ref>()</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>_io_service.run();</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_zia_1_1_server_1ad1a4b1650214d156491a98ff6b96d787" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_zia_1_1_server_1ad1a4b1650214d156491a98ff6b96d787" kindref="member">Server::close</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>_connectionManager.<ref refid="class_zia_1_1_connection_manager_1ac1db00d9a69520616bc20e0ac1ea311f" kindref="member">eraseAll</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_zia_1_1_log_1a7abad30f76aea6c210ae245885f05137" kindref="member">Log::info</ref>(</highlight><highlight class="stringliteral">&quot;Server<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Server::WaitingClient()</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>_acceptor.async_accept(_socket,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](boost::system::error_code<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_acceptor.is_open())</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_connectionManager.<ref refid="class_zia_1_1_connection_manager_1a556bcbe3969171deba4900c08feb7d93" kindref="member">addClient</ref>(std::make_shared&lt;Connection&gt;(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(_socket),<sp/>_connectionManager,<sp/>_pipeline</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitingClient();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>_configManager.<ref refid="classcfg_1_1_config_manager_1aa71c6277d421969606433b77d425d19d" kindref="member">getConfig</ref>(</highlight><highlight class="stringliteral">&quot;config&quot;</highlight><highlight class="normal">)-&gt;getName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_configManager.<ref refid="classcfg_1_1_config_manager_1aa71c6277d421969606433b77d425d19d" kindref="member">getConfig</ref>(</highlight><highlight class="stringliteral">&quot;config&quot;</highlight><highlight class="normal">)-&gt;getPath()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>_acceptorHTTPS.async_accept(_socket,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](boost::system::error_code<sp/>error)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_acceptorHTTPS.is_open())</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_connectionManager.<ref refid="class_zia_1_1_connection_manager_1a556bcbe3969171deba4900c08feb7d93" kindref="member">addClient</ref>(std::make_shared&lt;Connection&gt;(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(_socket),<sp/>_connectionManager,<sp/>_pipeline,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitingClient();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Server::ManagingSignals()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>_signals.async_wait([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](boost::system::error_code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_connectionManager.<ref refid="class_zia_1_1_connection_manager_1ac1db00d9a69520616bc20e0ac1ea311f" kindref="member">eraseAll</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_acceptor.close();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_acceptorHTTPS.close();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Server::setAcceptor(<ref refid="class_zia_1_1_server_1a0119259e0eaa12e4f688c6c64dbf6ac0" kindref="member">Acceptor</ref><sp/>&amp;acceptor,<sp/><ref refid="class_zia_1_1_server_1a4764ec255c11f5b7fb87f5ab1d44e952" kindref="member">Endpoint</ref><sp/>&amp;endpoint)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>acceptor.open(endpoint.protocol());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>acceptor.bind(endpoint);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>acceptor.listen();</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Server::addEnabledModules(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_zia_1a3076ef33a6c08b068cb8e444848ad33c" kindref="member">EnabledList</ref><sp/>&amp;modulesList)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;module<sp/>:<sp/>modulesList)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::filesystem::copy(module-&gt;getPath(),<sp/>std::getenv(</highlight><highlight class="stringliteral">&quot;TMP_MODULES_PATH&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::filesystem::copy_options::skip_existing);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>_pipeline.loadModules();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/server/Server.cpp"/>
  </compounddef>
</doxygen>
